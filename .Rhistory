library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
colnames(data_trials)[1] = "subject"
colnames(data_trials)[2] = "stimulus"
colnames(data_trials)[3] = "response"
colnames(data_trials)[4] = "confidence"
colnames(data_trials)[5] = "RT"
colnames(data_trials)[6] = "dot_diff"
colnames(data_trials)[7] = "correct"
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup()
data_trials <- data_trials |>
mutate(serial_bias = if_else(!is.na(lag(response)) & response != lag(stimulus) & correct == 0, 1, 0))
data_trials
qnData = readMat("rahnev/data/ME_phase2_excludqnadata_all.mat") # load questionnaire data
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
colnames(data_trials)[1] = "subject"
colnames(data_trials)[2] = "stimulus"
colnames(data_trials)[3] = "response"
colnames(data_trials)[4] = "confidence"
colnames(data_trials)[5] = "RT"
colnames(data_trials)[6] = "dot_diff"
colnames(data_trials)[7] = "correct"
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup()
data_trials <- data_trials |>
mutate(serial_bias = if_else(!is.na(lag(response)) & response != lag(stimulus) & correct == 0, 1, 0))
data_trials
qnData = readMat("rahnev/data/ME_phase2_excludqnadata_all.mat") # load questionnaire data
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
data_trials
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
data_trials
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
data_trials <- read_csv("data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
data_trials
data_trials <- read_csv("data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
data_trials
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup()
data_trials <- read_csv("data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
colnames(data_trials)[1] = "subject"
colnames(data_trials)[2] = "stimulus"
colnames(data_trials)[3] = "response"
colnames(data_trials)[4] = "confidence"
colnames(data_trials)[5] = "RT"
colnames(data_trials)[6] = "dot_diff"
colnames(data_trials)[7] = "correct"
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup()
data_trials
data_trials <- data_trials |>
mutate(serial_bias = if_else(!is.na(lag(response)) & response != lag(stimulus) & correct == 0, 1, 0))
data_trials
data_trials
data_trials
qnData = readMat("rahnev/data/ME_phase2_excludqnadata_all.mat") # load questionnaire data
taskData = readMat("rahnev/data/ME_phase2_excludanalyseddat_all.mat") # load task performance data
HDDM = read.csv('rahnev/data/subjParams_2k_3chain.csv') # load HDDM data
HDDMpara = data.frame(t(HDDM[1:nrow(HDDM),2:length(HDDM)]))
colnames(HDDMpara) <- c("a", "t", "v_inter", "v_delta")
# create objects for variables from task performance data
id<-matrix(0,length(taskData$analyseddata),1) # subject id
age<-matrix(0,length(taskData$analyseddata),1)
gender<-matrix(0,length(taskData$analyseddata),1)
accuracy<-matrix(0,length(taskData$analyseddata),1) # accuracy
mRatio<-matrix(0,length(taskData$analyseddata),1)   # metacognitive efficiency
confMean<-matrix(0,length(taskData$analyseddata),1) # mean confidence
# create objects for variables from task questionnaire data
qnid<-matrix(0,length(qnData$allqna),1) # subject id
zung<-matrix(0,length(qnData$allqna),1)
anxiety<-matrix(0,length(qnData$allqna),1)
ocir<-matrix(0,length(qnData$allqna),1)
leb<-matrix(0,length(qnData$allqna),1)
iq<-matrix(0,length(qnData$allqna),1)
bis<-matrix(0,length(qnData$allqna),1)
schizo<-matrix(0,length(qnData$allqna),1)
eat<-matrix(0,length(qnData$allqna),1)
apathy<-matrix(0,length(qnData$allqna),1)
alcohol<-matrix(0,length(qnData$allqna),1)
# extracting data from allqna data file
# loop over for all subjects
for (i in 1:length(qnData$allqna))
{
qnid[i] = qnData$allqna[[i]][[1]][,,1]$id
zung[i] = qnData$allqna[[i]][[1]][,,1]$zung[,,1]$score #first brackets is subject number
anxiety[i] = qnData$allqna[[i]][[1]][,,1]$anxiety[,,1]$score
ocir[i] = qnData$allqna[[i]][[1]][,,1]$ocir[,,1]$score
leb[i] = qnData$allqna[[i]][[1]][,,1]$leb[,,1]$score
iq[i] = qnData$allqna[[i]][[1]][,,1]$iq[,,1]$score
bis[i] = qnData$allqna[[i]][[1]][,,1]$bis[,,1]$score[,,1]$total
schizo[i] = qnData$allqna[[i]][[1]][,,1]$schizo[,,1]$score[,,1]$total
eat[i] = qnData$allqna[[i]][[1]][,,1]$eat[,,1]$score[,,1]$total
apathy[i] = qnData$allqna[[i]][[1]][,,1]$apathy[,,1]$score
alcohol[i] = qnData$allqna[[i]][[1]][,,1]$alcohol[,,1]$score
}
# extracting data from analysed data
# loop over for all subjects
for (i in 1:length(taskData$analyseddata))
{
id[i]=taskData$analyseddata[[i]][[1]][,,1]$data[1,4]
age[i] =taskData$analyseddata[[i]][[1]][,,1]$data[1,2]
gender[i]=taskData$analyseddata[[i]][[1]][,,1]$data[1,3]
confMean[i] = mean(taskData$analyseddata[[i]][[1]][,,1]$data[,9])
accuracy[i] = mean(taskData$analyseddata[[i]][[1]][,,1]$data[,6])
mRatio[i] = taskData$analyseddata[[i]][[1]][,,1]$mratio
}
# set gender as factor (male or female)
gender <- factor(gender)
# create dataframe to store questionnaire data
qnFrame = data.frame(qnid, anxiety, eat, apathy, alcohol, zung, ocir, leb, iq, bis, schizo)
# create dataframe to store task performance data
taskFrame = data.frame(id,age,gender,confMean,accuracy,mRatio)
# merge all data together into one data frame
allData =merge(taskFrame, qnFrame,by.x=c("id"), by.y=c("qnid"))
# join HDDM variables to existing dataframe
allData=data.frame(allData,HDDMpara)
#scaling the task performance
allData$age.sc = scale(allData$age)
allData$confMean.sc = scale(allData$confMean)
allData$accuracy.sc = scale(allData$accuracy)
# scaling the questionnaire scores
allData$zung.sc = scale(log(allData$zung))
allData$anxiety.sc = scale(log(allData$anxiety))
allData$ocir.sc = scale(log(allData$ocir+1))
allData$leb.sc = scale(log(allData$leb+1))
allData$iq.sc = scale(allData$iq)
allData$schizo.sc = scale(log(allData$schizo+1))
allData$bis.sc = scale(log(allData$bis))
allData$eat.sc = scale(log(allData$eat+1))
allData$apathy.sc = scale(log(allData$apathy))
allData$alcohol.sc = scale(log(allData$alcohol+1))
# scale HDDM variables
allData$a.sc = scale(allData$a)
allData$t.sc = scale(allData$t)
allData$v_inter.sc = scale(allData$v_inter)
allData$v_delta.sc = scale(allData$v_delta)
#exclude negative mRatios and scale the mRatios of the subjects left
mrExcludedData <- allData[allData$mRatio>0,]
mrExcludedData$mRatio.sc = scale(log(mrExcludedData$mRatio))
s01_trials <- data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
signed_contrast = dot_diff) %>%
ungroup() %>%
select(session, correct, intercept, signed_contrast)
s01_trials
data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
signed_contrast = dot_diff
s01_trials <- data_trials %>%
s01_trials <- data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
signed_contrast = dot_diff) %>%
ungroup() %>%
select(session, correct, intercept, signed_contrast)
s01_trials
glm_hmm2_s01 <- s01_trials %>%
glm_hmm_r(.num_states = 2)
glm_hmm2_s01
glm_hmm2_s01$recovered_weights
psycho_2_s01 <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(value))
psycho_2_s01 |>
ggplot(aes(x = signed_contrast, y = prop, color = state)) +
geom_line() +
ylim(0, 1)
glm_hmm2_s01$posterior_probs
ggplot() +
geom_line(data = glm_hmm2_s01$posterior_probs,
aes(x = trial, y = p, color = state)) +
geom_point(data = filter(data_trials, subject == 1), aes(x = trial, y = correct), shape = "|")
data_trials |>
filter(subject == 1)
data_trials |>
filter(subject == 1) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(response)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point()
data_trials |>
filter(subject == 1) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(response)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth()
data_trials |>
filter(subject == 2) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(response)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth()
data_trials |>
filter(subject == 3) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(response)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth()
data_trials |>
filter(subject == 3) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(correct)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth()
data_trials |>
filter(subject == 3) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(correct)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 3) |>
group_by(stimulus, dot_diff) |>
summarise(r = mean(response)) |>
ggplot(aes(x = dot_diff, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 3) |>
mutate(x = stimulus * dot_diff) |>
# group_by(stimulus, dot_diff) |>
group_by(x) |>
summarise(r = mean(response)) |>
ggplot(aes(x = x, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 3) |>
mutate(x = stimulus * dot_diff)
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff) |>
# group_by(stimulus, dot_diff) |>
group_by(x) |>
summarise(r = mean(response)) |>
ggplot(aes(x = x, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1))
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff)
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff) |>
# group_by(stimulus, dot_diff) |>
group_by(x) |>
summarise(r = mean(response)) |>
ggplot(aes(x = x, y = r, color = factor(stimulus))) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 3) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff) |>
# group_by(stimulus, dot_diff) |>
group_by(x) |>
summarise(r = mean(response)) |>
ggplot(aes(x = x, y = r)) +
geom_point() +
geom_smooth(se = F)
data_trials |>
filter(subject == 1) |>
mutate(stimulus = if_else(stimulus == 1, 1, -1)) |>
mutate(x = stimulus * dot_diff) |>
# group_by(stimulus, dot_diff) |>
group_by(x) |>
summarise(r = mean(response)) |>
ggplot(aes(x = x, y = r)) +
geom_point() +
geom_smooth(se = F)
data_trials
data_trials
qnData
taskData = readMat("rahnev/data/ME_phase2_excludanalyseddat_all.mat") # load task performance data
taskData = readMat("rahnev/data/ME_phase2_excludanalyseddat_all.mat") # load task performance data
HDDM = read.csv('rahnev/data/subjParams_2k_3chain.csv') # load HDDM data
HDDMpara = data.frame(t(HDDM[1:nrow(HDDM),2:length(HDDM)]))
colnames(HDDMpara) <- c("a", "t", "v_inter", "v_delta")
allData
usethis::use_github()
usethis::use_github()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
create_psychometric <- function(.value) {
tibble(signed_contrast = seq(-1, 1, .01)) |>
mutate(prop = glm_logistic_fun(signed_contrast, .value))
}
data_trials <- read_csv("data_Rouault_2018_Expt1.csv")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
list.files("R", full.names = TRUE) |>
walk(source)
data_trials <- read_csv("data/data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
data_trials <- rename(data_trials, subject = Subj_idx, stimulus = Stimulus, response = Response, confidence = Confidence, RT = RT_dec, dot_diff = DotDiff, correct = Accuracy)
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup() |>
mutate(stimulus = if_else(stimulus == 0, -1, 1),
dot_diff = stimulus * dot_diff,
prev_resp = lag(response),
fing_err = if_else(confidence == 1, 1, 0)) |>
drop_na()
data_trials
s01_trials <- data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
signed_contrast = dot_diff) %>%
ungroup() %>%
select(session, response, intercept, signed_contrast)
s01_trials
glm_hmm2_s01 <- s01_trials %>%
glm_hmm_r(.num_states = 2)
reticulate::repl_python()
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
glm_hmm2_s01 <- s01_trials %>%
glm_hmm_r(.num_states = 2)
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
