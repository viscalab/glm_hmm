mutate(fit = list(glm_hmm_r(data,
.num_states = 2, .seeds = 1:2,
.all_seeds = TRUE)))
design_matrix |> distinct(subject)
design_matrix <- data_trials %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(subject, session, response, intercept, dot_diff) |>
filter(subject < 10)
design_matrix
glm_hmm2 <- design_matrix |>
group_by(subject) |>
nest() %>%
rowwise() %>%
mutate(fit = list(glm_hmm_r(data,
.num_states = 2, .seeds = 1:2,
.all_seeds = TRUE)))
glm_hmm2 <- design_matrix |>
group_by(subject) |>
nest() %>%
rowwise() %>%
mutate(fit = list(glm_hmm_r(data,
.num_states = 2, .seeds = 1:20,
.all_seeds = TRUE)))
save(glm_hmm2, file = "RData/glm_hmm2.RData")
design_matrix <- data_trials %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(subject, session, response, intercept, dot_diff) |>
filter(subject <= 10) # solo 10 participantes
design_matrix
glm_hmm_extract_best <- function(.fits) {
.fits <- .glm_hmm %>%
filter(log_lik == max(log_lik)) %>%
pluck("fit") %>%
pluck(1)
}
glm_hmm_all_seeds_2 <- design_matrix |>
group_by(subject) |>
nest() %>%
rowwise() %>%
mutate(fit = list(glm_hmm_r(data,
.num_states = 2, .seeds = 1:20,
.all_seeds = TRUE)))
glm_hmm_extract_best <- function(.fits) {
.fits <- .glm_hmm %>%
filter(log_lik == max(log_lik)) %>%
pluck("fit") %>%
pluck(1)
}
glm_hmm_2 <- glm_hmm_all_seeds_2 %>%
mutate(fit = list(glm_hmm_extract_best(fit)))
glm_hmm_extract_best <- function(.fits) {
.fits %>%
filter(log_lik == max(log_lik)) %>%
pluck("fit") %>%
pluck(1)
}
glm_hmm_2 <- glm_hmm_all_seeds_2 %>%
mutate(fit = list(glm_hmm_extract_best(fit)))
glm_hmm_2
glm_hmm_2 %>%
select(-data) %>%
unnest_wider(fit) %>%
select(subject, recovered_weights) %>%
unnest(recovered_weights)
glm_hmm_2 %>%
select(-data) %>%
unnest_wider(fit) %>%
select(subject, recovered_weights) %>%
unnest(recovered_weights)
liks_glm_hmm_2 <- glm_hmm_2 %>%
unnest_wider(fit) %>%
mutate(n = map(data, count)) %>%
unnest(n) %>%
select(subject, log_lik, n_par, n) %>%
mutate(model = "int-slo 2")
liks_glm_hmm_2
glm_hmm_2
glm_hmm_2 %>%
unnest_wider(fit)
glm_hmm_2 %>%
unnest_wider(fit)
liks_glm_hmm_2 <- glm_hmm_2 %>%
unnest_wider(fit) %>%
mutate(n = map(data, count)) %>%
unnest(n) %>%
select(subject, log_lik, n_par, n) %>%
mutate(model = "int-slo 2")
liks_glm_hmm_2
glm_hmm_2
glm_hmm_2 |>
filter(subject == 1)
glm_hmm_2 |>
filter(subject == 1) |>
pluck(fit)
glm_hmm_2 |>
filter(subject == 1) |>
pluck(fit)
glm_hmm_2 |>
filter(subject == 1) |>
pluck("fit")
plot_psycho_one_participant <- function(.fit) {
posterior_wins <- .fit$posterior_probs |>
group_by(trial) %>%
filter(p == max(p)) %>%
select(-p)
averages <- .fit$model_matrix_with_session %>%
mutate(trial = row_number()) %>%
left_join(posterior_wins, by = c("session", "trial")) %>%
mutate(dot_diff_bin = cut_interval(dot_diff, 10)) |>
group_by(dot_diff_bin, state) %>%
summarise(dot_diff = mean(dot_diff), prob = mean(response), n = n(), .groups = "keep")
psycho <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(dot_diff, value))
ggplot() +
geom_point(data = averages,
aes(dot_diff, prob, color = state)) +
geom_line(data = psycho,
aes(x = dot_diff, y = prop, color = state))
}
plot_psycho_one_participant(glm_hmm2_s01)
plot_trials_one_participant <- function(.fit) {
ggplot() +
geom_line(data = .fit$posterior_probs,
aes(x = trial, y = p, color = state))
}
plot_trials_one_participant(glm_hmm2_s01)
plot_grid(plot_psycho_one_participant(glm_hmm2_s01),
plot_trials_one_participant(glm_hmm2_s01)
)
library(cowplot)
plot_grid(plot_psycho_one_participant(glm_hmm2_s01),
plot_trials_one_participant(glm_hmm2_s01)
)
plot_grid(plot_psycho_one_participant(glm_hmm2_s01),
plot_trials_one_participant(glm_hmm2_s01),
rel_widths = c(.4, .6)
)
plot_grid(plot_psycho_one_participant(glm_hmm2_s01),
plot_trials_one_participant(glm_hmm2_s01),
rel_widths = c(.5, .5),
labels = "AUTO"
)
plotting_psycho_one_participant <- function(.fit) {
posterior_wins <- .fit$posterior_probs |>
group_by(trial) %>%
filter(p == max(p)) %>%
select(-p)
averages <- .fit$model_matrix_with_session %>%
mutate(trial = row_number()) %>%
left_join(posterior_wins, by = c("session", "trial")) %>%
mutate(dot_diff_bin = cut_interval(dot_diff, 10)) |>
group_by(dot_diff_bin, state) %>%
summarise(dot_diff = mean(dot_diff), prob = mean(response), n = n(), .groups = "keep")
psycho <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(dot_diff, value))
ggplot() +
geom_point(data = averages,
aes(dot_diff, prob, color = state)) +
geom_line(data = psycho,
aes(x = dot_diff, y = prop, color = state))
}
plotting_psycho_one_participant(glm_hmm2_s01)
plotting_trials_one_participant <- function(.fit) {
ggplot() +
geom_line(data = .fit$posterior_probs,
aes(x = trial, y = p, color = state))
}
plotting_trials_one_participant(glm_hmm2_s01)
plot_grid(plotting_psycho_one_participant(glm_hmm2_s01),
plotting_trials_one_participant(glm_hmm2_s01),
rel_widths = c(.5, .5),
labels = "AUTO"
)
plotting_one_participant <- function(.fit) {
plot_grid(plotting_psycho_one_participant(.fit),
plotting_trials_one_participant(.fit),
rel_widths = c(.5, .5),
labels = "AUTO")
}
plotting_one_participant(glm_hmm2_s01)
plots_2 <- glm_hmm_2 %>%
rowwise() %>%
mutate(p = list(plotting_one_participant(fit)))
plots_2_grid <- plot_grid(plotlist = plots_2$p, ncol = 5)
plots_2 <- glm_hmm_2 %>%
rowwise() %>%
mutate(p = list(plotting_one_participant(fit)))
plots_2_grid <- plot_grid(plotlist = plots_2$p, ncol = 5)
file_name <- paste0("figures/", deparse(substitute(.glm_hmm)), ".pdf")
ggsave("figures/plots_2_grid.pdf",
plots_2_grid, width = 6, height = 6)
ggsave("figures/plots_2_grid.pdf",
plots_2_grid, width = 6, height = 6)
ggsave("figures/plots_2_grid.pdf",
plots_2_grid, width = 20, height = 20)
plots_2 <- glm_hmm_2 %>%
rowwise() %>%
mutate(p = list(plotting_one_participant(fit)))
plots_2_grid <- plot_grid(plotlist = plots_2$p, ncol = 2)
file_name <- paste0("figures/", deparse(substitute(.glm_hmm)), ".pdf")
ggsave("figures/plots_2_grid.pdf",
plots_2_grid, width = 20, height = 20)
glm_hmm_2 %>%
rowwise()
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(tidyverse)
library(broom)
library(dplyr)
library(R.matlab)
library(cowplot)
list.files("R", full.names = TRUE) |>
walk(source)
plotting_psycho_one_participant <- function(.fit) {
posterior_wins <- .fit$posterior_probs |>
group_by(trial) %>%
filter(p == max(p)) %>%
select(-p)
averages <- .fit$model_matrix_with_session %>%
mutate(trial = row_number()) %>%
left_join(posterior_wins, by = c("session", "trial")) %>%
mutate(dot_diff_bin = cut_interval(dot_diff, 10)) |>
group_by(dot_diff_bin, state) %>%
summarise(dot_diff = mean(dot_diff), prob = mean(response), n = n(), .groups = "keep")
psycho <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(dot_diff, value))
ggplot() +
geom_point(data = averages,
aes(dot_diff, prob, color = state)) +
geom_line(data = psycho,
aes(x = dot_diff, y = prop, color = state))
}
plotting_trials_one_participant <- function(.fit) {
internal_matrix_doble <- data.frame(.fit$model_matrix_with_session[rep(seq_len(nrow(.fit$model_matrix_with_session)), each = length(unique(.fit$posterior_probs$state))), ])|>
cbind(.fit$posterior_probs)
duplicated_cols <- duplicated(names(internal_matrix_doble))
internal_matrix_doble <- internal_matrix_doble[!duplicated_cols | names(internal_matrix_doble) %in% duplicated_cols[!duplicated_cols]]
internal_matrix_single <- internal_matrix_doble |> select(trial, response) |> distinct(trial, .keep_all = TRUE)
ggplot() +
geom_line(data = internal_matrix_doble, aes(x = trial, y = p, color = state)) +
geom_point(data = internal_matrix_single, aes(x = trial, y = response), shape = "|") +
geom_text(data = internal_matrix_doble, aes(text = subject))
}
plotting_one_participant <- function(.fit) {
plot_grid(plotting_psycho_one_participant(.fit),
plotting_trials_one_participant(.fit),
rel_widths = c(.5, .5),
labels = "AUTO")
}
plotting_one_participant <- function(.fit) {
plot_grid(plotting_psycho_one_participant(.fit),
plotting_trials_one_participant(.fit),
rel_widths = c(.5, .5),
labels = "AUTO")
}
data_trials <- read_csv("data/data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
data_trials <- rename(data_trials, subject = Subj_idx, stimulus = Stimulus, response = Response, confidence = Confidence, RT = RT_dec, dot_diff = DotDiff, correct = Accuracy)
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup() |>
mutate(stimulus = if_else(stimulus == 0, -1, 1),
dot_diff = stimulus * dot_diff,
prev_resp = lag(response),
fing_err = if_else(confidence == 1, 1, 0)) |>
drop_na()
data_trials
data_trials |>
group_by(subject) |>
count(stimulus) |>
group_by(subject) |>
mutate(prop = n / sum(n)) |>
select(-n) |>
pivot_wider(names_from = stimulus, values_from = prop)
s01_design_matrix <- data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(session, response, intercept, dot_diff)
s01_design_matrix
s02_design_matrix <- data_trials %>%
filter(subject == 2) %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(session, response, intercept, dot_diff)
s02_design_matrix
glm_hmm2_s01 <- s01_design_matrix %>%
glm_hmm_r(.num_states = 2, .seeds = 1:40, .all_seeds = TRUE)
glm_hmm2_s01
glm_hmm2_s01 %>%
arrange(log_lik) %>%
mutate(ordered_seed = row_number()) %>%
ggplot(aes(ordered_seed, log_lik)) +
geom_line() +
geom_point()
glm_hmm2_s01 <- glm_hmm2_s01 |>
filter(log_lik == max(log_lik)) |>
pluck("fit") %>%
pluck(1)
glm_hmm2_s01
psycho_2_s01 <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(dot_diff, value))
posterior_wins2_s01 <- glm_hmm2_s01$posterior_probs |>
group_by(trial) %>%
filter(p == max(p)) %>%
select(-p)
posterior_wins2_s01
averages_states2_s01 <- glm_hmm2_s01$model_matrix_with_session %>%
mutate(trial = row_number()) %>%
left_join(posterior_wins2_s01, by = c("session", "trial")) %>%
mutate(dot_diff_bin = cut_interval(dot_diff, 10)) |>
group_by(dot_diff_bin, state) %>%
summarise(dot_diff = mean(dot_diff), prob = mean(response), n = n(), .groups = "keep")
ggplot() +
geom_point(data = averages_states2_s01,
aes(dot_diff, prob, color = state)) +
geom_line(data = psycho_2_s01,
aes(x = dot_diff, y = prop, color = state))
s01_2_trials_plot <- ggplot() +
geom_line(data = glm_hmm2_s01$posterior_probs,
aes(x = trial, y = p, color = state)) +
geom_point(data = filter(data_trials, subject == 1), aes(x = trial, y = response), shape = "|")
s01_2_trials_plot
posterior_wins2_s01 |>
ungroup() |>
count(state)
plotting_psycho_one_participant(glm_hmm2_s01)
plotting_trials_one_participant(glm_hmm2_s01)
plot_grid(plotting_psycho_one_participant(glm_hmm2_s01),
plotting_trials_one_participant(glm_hmm2_s01),
rel_widths = c(.5, .5),
labels = "AUTO")
plotting_one_participant(glm_hmm2_s01)
data_trials <- read_csv("data/data_Rouault_2018_Expt1.csv", show_col_types = FALSE)
data_trials <- rename(data_trials, subject = Subj_idx, stimulus = Stimulus, response = Response, confidence = Confidence, RT = RT_dec, dot_diff = DotDiff, correct = Accuracy)
data_trials <- data_trials |>
group_by(subject) |>
mutate(trial = row_number()) |>
ungroup() |>
mutate(stimulus = if_else(stimulus == 0, -1, 1),
dot_diff = stimulus * dot_diff,
prev_resp = lag(response),
fing_err = if_else(confidence == 1, 1, 0)) |>
drop_na()
data_trials
data_trials |>
group_by(subject) |>
count(stimulus) |>
group_by(subject) |>
mutate(prop = n / sum(n)) |>
select(-n) |>
pivot_wider(names_from = stimulus, values_from = prop)
s01_design_matrix <- data_trials %>%
filter(subject == 1) %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(session, response, intercept, dot_diff)
s01_design_matrix
s02_design_matrix <- data_trials %>%
filter(subject == 2) %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(session, response, intercept, dot_diff)
s02_design_matrix
glm_hmm2_s01 <- s01_design_matrix %>%
glm_hmm_r(.num_states = 2, .seeds = 1:40, .all_seeds = TRUE)
glm_hmm2_s01
glm_hmm2_s01 %>%
arrange(log_lik) %>%
mutate(ordered_seed = row_number()) %>%
ggplot(aes(ordered_seed, log_lik)) +
geom_line() +
geom_point()
glm_hmm2_s01 <- glm_hmm2_s01 |>
filter(log_lik == max(log_lik)) |>
pluck("fit") %>%
pluck(1)
glm_hmm2_s01
glm_hmm2_seeds_s01 <- s01_design_matrix %>%
glm_hmm_r(.num_states = 2, .seeds = 1:40, .all_seeds = TRUE)
glm_hmm2_seeds_s01
glm_hmm2_seeds_s01 %>%
arrange(log_lik) %>%
mutate(ordered_seed = row_number()) %>%
ggplot(aes(ordered_seed, log_lik)) +
geom_line() +
geom_point()
glm_hmm2_s01 <- glm_hmm2_seeds_s01 |>
filter(log_lik == max(log_lik)) |>
pluck("fit") %>%
pluck(1)
glm_hmm2_s01
psycho_2_s01 <- glm_hmm2_s01$recovered_weights |>
group_by(state) |>
reframe(create_psychometric(dot_diff, value))
posterior_wins2_s01 <- glm_hmm2_s01$posterior_probs |>
group_by(trial) %>%
filter(p == max(p)) %>%
select(-p)
posterior_wins2_s01
averages_states2_s01 <- glm_hmm2_s01$model_matrix_with_session %>%
mutate(trial = row_number()) %>%
left_join(posterior_wins2_s01, by = c("session", "trial")) %>%
mutate(dot_diff_bin = cut_interval(dot_diff, 10)) |>
group_by(dot_diff_bin, state) %>%
summarise(dot_diff = mean(dot_diff), prob = mean(response), n = n(), .groups = "keep")
ggplot() +
geom_point(data = averages_states2_s01,
aes(dot_diff, prob, color = state)) +
geom_line(data = psycho_2_s01,
aes(x = dot_diff, y = prop, color = state))
s01_2_trials_plot <- ggplot() +
geom_line(data = glm_hmm2_s01$posterior_probs,
aes(x = trial, y = p, color = state)) +
geom_point(data = filter(data_trials, subject == 1), aes(x = trial, y = response), shape = "|")
s01_2_trials_plot
posterior_wins2_s01 |>
ungroup() |>
count(state)
plotting_psycho_one_participant(glm_hmm2_s01)
plotting_trials_one_participant(glm_hmm2_s01)
plotting_trials_one_participant(glm_hmm2_s01)
plotting_trials_one_participant <- function(.fit) {
internal_matrix_doble <- data.frame(.fit$model_matrix_with_session[rep(seq_len(nrow(.fit$model_matrix_with_session)), each = length(unique(.fit$posterior_probs$state))), ])|>
cbind(.fit$posterior_probs)
duplicated_cols <- duplicated(names(internal_matrix_doble))
internal_matrix_doble <- internal_matrix_doble[!duplicated_cols | names(internal_matrix_doble) %in% duplicated_cols[!duplicated_cols]]
internal_matrix_single <- internal_matrix_doble |> select(trial, response) |> distinct(trial, .keep_all = TRUE)
ggplot() +
geom_line(data = internal_matrix_doble, aes(x = trial, y = p, color = state)) +
geom_point(data = internal_matrix_single, aes(x = trial, y = response), shape = "|") +
geom_text(data = internal_matrix_doble, aes(text = subject))
}
plotting_trials_one_participant(glm_hmm2_s01)
plotting_trials_one_participant <- function(.fit) {
internal_matrix_doble <- data.frame(.fit$model_matrix_with_session[rep(seq_len(nrow(.fit$model_matrix_with_session)), each = length(unique(.fit$posterior_probs$state))), ])|>
cbind(.fit$posterior_probs)
duplicated_cols <- duplicated(names(internal_matrix_doble))
internal_matrix_doble <- internal_matrix_doble[!duplicated_cols | names(internal_matrix_doble) %in% duplicated_cols[!duplicated_cols]]
internal_matrix_single <- internal_matrix_doble |> select(trial, response) |> distinct(trial, .keep_all = TRUE)
ggplot() +
geom_line(data = internal_matrix_doble, aes(x = trial, y = p, color = state)) +
geom_point(data = internal_matrix_single, aes(x = trial, y = response), shape = "|") +
geom_text(data = internal_matrix_doble, aes(text = subject))
}
plotting_trials_one_participant(glm_hmm2_s01)
plot_grid(plotting_psycho_one_participant(glm_hmm2_s01),
plotting_trials_one_participant(glm_hmm2_s01),
rel_widths = c(.5, .5),
labels = "AUTO")
plotting_one_participant(glm_hmm2_s01)
design_matrix_all <- data_trials %>%
mutate(session = 1,
intercept = 1,
dot_diff = dot_diff) %>%
ungroup() %>%
select(subject, session, response, intercept, dot_diff) |>
filter(subject <= 10) # solo 10 participantes
design_matrix_all
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
install.packages(c("bookdown", "cachem", "checkmate", "class", "deldir", "emmeans", "evaluate", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "KernSmooth", "knitr", "later", "maptools", "markdown", "MASS", "Matrix", "metafor", "mvtnorm", "nnet", "parallelly", "profvis", "RcppArmadillo", "rlang", "rmarkdown", "sass", "sp", "stringfish", "sys", "testthat", "tzdb", "viridis", "viridisLite", "vroom", "waldo", "xml2"))
install.packages(c("bookdown", "cachem", "checkmate", "class", "deldir", "emmeans", "evaluate", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "KernSmooth", "knitr", "later", "maptools", "markdown", "MASS", "Matrix", "metafor", "mvtnorm", "nnet", "parallelly", "profvis", "RcppArmadillo", "rlang", "rmarkdown", "sass", "sp", "stringfish", "sys", "testthat", "tzdb", "viridis", "viridisLite", "vroom", "waldo", "xml2"))
install.packages(c("bookdown", "cachem", "checkmate", "class", "deldir", "emmeans", "evaluate", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "KernSmooth", "knitr", "later", "maptools", "markdown", "MASS", "Matrix", "metafor", "mvtnorm", "nnet", "parallelly", "profvis", "RcppArmadillo", "rlang", "rmarkdown", "sass", "sp", "stringfish", "sys", "testthat", "tzdb", "viridis", "viridisLite", "vroom", "waldo", "xml2"))
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
quit
library(reticulate)
use_condaenv("glmhmm")
source_python("python/glm_hmm.py")
reticulate::repl_python()
